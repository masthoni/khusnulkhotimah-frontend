function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};











var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Acl = createCommonjsModule(function (module) {
  'use strict';

  /**
   * acler
   * Copyright(c) 2017 Evgeny Razumov
   * MIT Licensed
   */

  var InvalidExpression = function (_Error) {
    inherits(InvalidExpression, _Error);

    function InvalidExpression() {
      classCallCheck(this, InvalidExpression);

      var _this = possibleConstructorReturn(this, _Error.call(this, 'Invalid expression.'));

      _this.name = 'InvalidExpression';
      return _this;
    }

    return InvalidExpression;
  }(Error);

  var operators = {
    or: {
      precedence: 1,
      func: function func(a, b) {
        return a || b;
      }
    },
    and: {
      precedence: 2,
      func: function func(a, b) {
        return a && b;
      }
    },
    not: {
      precedence: 3,
      func: function func(b) {
        return !b;
      },
      n: 1
    }

    // synonyms
  };operators['&&'] = operators.and;
  operators['||'] = operators.or;
  operators['!'] = operators.not;

  // add whitespace to '(', ')', and '!' operators so that
  // "(a && !b)" -> "( a && ! b )"
  var addSpaces = function addSpaces(string) {
    var split = string.split('');
    var characters = split.map(function (character, i) {
      if (character === '(' || character === ')') {
        if (split[i - 1] !== ' ') character = ' ' + character;
        if (split[i + 1] !== ' ') character = character + ' ';
      }
      if (character === '!') {
        if (split[i + 1] !== ' ' && split[i + 1] !== '=') {
          character = character + ' ';
        }
      }
      return character;
    });
    return characters.join('');
  };

  // Uses the shunting-yard algorithm to convert infix notation
  // into Reverse Polish Notation
  var convertToRPN = function convertToRPN(exp) {
    if (typeof exp !== 'string') {
      throw new InvalidExpression();
    }
    exp = exp.replace(/\s+/g, ' ').replace(/\s+$/, '').replace(/^\s+/, '');
    exp = addSpaces(exp);
    var stack = [];
    var rpn = [];
    for (var _iterator = exp.trim().split(' '), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var token = _ref;

      if (operators[token]) {
        // This assumes no right-associative operators
        while (stack[stack.length - 1] && operators[stack[stack.length - 1]] && operators[token].precedence <= operators[stack[stack.length - 1]].precedence) {
          rpn.push(stack.pop());
        }
        stack.push(token);
      } else if (token === '(') {
        stack.push(token);
      } else if (token === ')') {
        while (stack.length && stack[stack.length - 1] !== '(') {
          rpn.push(stack.pop());
        }
        if (stack[stack.length - 1] === '(') {
          stack.pop();
        } else {
          throw new InvalidExpression();
        }
      } else if (/^[a-zA-Z_-]+$/.test(token)) {
        rpn.push(token);
      } else {
        throw new InvalidExpression();
      }
    }
    return rpn.concat(stack.reverse());
  };

  var toBool = function toBool(token, checker) {
    if (typeof token === 'boolean') {
      return token;
    }
    return checker(token);
  };

  var check = function check(expression, checker) {
    var rpn = convertToRPN(expression);
    var stack = [];
    for (var _iterator2 = rpn, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var token = _ref2;

      var operator = operators[token];
      if (operator) {
        var numArgs = operator.n || 2;
        var args = [];
        for (var i = 1; i <= numArgs; i++) {
          var arg = toBool(stack.pop(), checker);
          args.push(arg);
        }
        args = args.reverse();
        var result = operator.func.apply(operator, args);
        stack.push(result);
      } else {
        var _result = toBool(token, checker);
        stack.push(_result);
      }
    }
    return stack[0];
  };

  module.exports = { check: check };
});

var Acl_1 = Acl.check;

export { Acl_1 as check };
export default Acl;
